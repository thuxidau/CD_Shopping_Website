---
targetClass:
  fullClassName: "controller.AddServlet"
methods:
- method:
    name: "processRequest"
    sourceCodeSignature: "void processRequest(HttpServletRequest request, HttpServletResponse\
      \ response)"
    returnType: "void"
    throwsExceptions:
    - "jakarta.servlet.ServletException"
    - "java.io.IOException"
    parameters:
    - name: "request"
      type: "jakarta.servlet.http.HttpServletRequest"
    - name: "response"
      type: "jakarta.servlet.http.HttpServletResponse"
    instructionFingerprint: "D902EA3064B1DAAC544EEB546B60EE31"
  paths:
  - testPathName: "processRequestWhenDefaultBranchThrowsThrowable"
    constructorSignature: "<init>(dal.ProductDAO) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      valueUuid: "response"
    - type: "LOCAL_VARIABLE"
      name: "response"
      valueUuid: "response"
      methodExercised:
        expression: "setContentType(uniqueUuid1):void"
    - type: "LOCAL_VARIABLE"
      name: "response"
      valueUuid: "response"
      methodExercised:
        expression: "getWriter():printWriter"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "getContextPath():string"
    - type: "RESULT"
      name: "result"
      valueUuid: "throwable"
    disabled: true
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.PrintWriter.println(java.lang.String)\
        \ : void"
    disabledStatusUpdatedBy: "SYSTEM"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "controller.AddServlet"
        parameters:
        - name: "productDAO"
          value:
            sapientType: "MOCK"
            valueType: "dal.ProductDAO"
            uuid: "productDAO"
      valueType: "controller.AddServlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "BASIC"
      content: !<regular>
        value: "text/html;charset=UTF-8"
      valueType: "java.lang.String"
      uuid: "uniqueUuid1"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.PrintWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.io.Writer"
              method: "nullWriter"
              methodParameters: []
            valueType: "java.io.Writer"
            uuid: "printWriter-out"
      valueType: "java.io.PrintWriter"
      uuid: "printWriter"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "EXCEPTION"
      content: !<new>
        target: "java.lang.Throwable"
        parameters: []
      valueType: "java.lang.Throwable"
      uuid: "throwable"
    branches:
    - lineNumber: 23
      expression: "branch expression (line 23)"
      range: "(23,1)-(23,200)"
      evaluatedAs: true
    catchBlockExercised:
      idExternalInstruction: 0
      id: 1
      catchExceptions:
      - "java.lang.Throwable"
  - testPathName: "processRequestWhenDefaultBranch"
    constructorSignature: "<init>(dal.ProductDAO) : void"
    problemWasSolvedByProver: false
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      valueUuid: "response"
    - type: "LOCAL_VARIABLE"
      name: "response"
      valueUuid: "response"
      methodExercised:
        expression: "setContentType(uniqueUuid2):void"
    - type: "LOCAL_VARIABLE"
      name: "response"
      valueUuid: "response"
      methodExercised:
        expression: "getWriter():printWriter"
        throwsExceptions:
        - "java.io.IOException"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "getContextPath():string"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    failureReason:
      reason: "METHOD_WITHOUT_EXPRESSION_SUPPORT"
      details: "Expression missing: java.io.PrintWriter.println(java.lang.String)\
        \ : void"
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "controller.AddServlet"
        parameters:
        - name: "productDAO"
          value:
            sapientType: "MOCK"
            valueType: "dal.ProductDAO"
            uuid: "productDAO"
      valueType: "controller.AddServlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "BASIC"
      content: !<regular>
        value: "text/html;charset=UTF-8"
      valueType: "java.lang.String"
      uuid: "uniqueUuid2"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "OBJECT"
      content: !<new>
        target: "java.io.PrintWriter"
        parameters:
        - name: "out"
          value:
            sapientType: "OBJECT"
            content: !<static_method_return>
              target: "java.io.Writer"
              method: "nullWriter"
              methodParameters: []
            valueType: "java.io.Writer"
            uuid: "printWriter-out"
      valueType: "java.io.PrintWriter"
      uuid: "printWriter"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "A"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "VOID"
      uuid: "expectedResult"
    branches:
    - lineNumber: 33
      expression: "branch expression (line 33)"
      range: "(33,1)-(33,200)"
      evaluatedAs: false
- method:
    name: "doGet"
    sourceCodeSignature: "void doGet(HttpServletRequest request, HttpServletResponse\
      \ response)"
    returnType: "void"
    throwsExceptions:
    - "jakarta.servlet.ServletException"
    - "java.io.IOException"
    parameters:
    - name: "request"
      type: "jakarta.servlet.http.HttpServletRequest"
    - name: "response"
      type: "jakarta.servlet.http.HttpServletResponse"
    instructionFingerprint: "AC40AF4F7880B82E1DF6DF7E6EFBAE2F"
  paths:
  - testPathName: "doGetTest"
    constructorSignature: "<init>(dal.ProductDAO) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      valueUuid: "response"
    - type: "INTERNAL"
      name: "internalMethod"
      methodExercised:
        expression: "processRequest(request,response):void"
        throwsExceptions:
        - "jakarta.servlet.ServletException"
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "controller.AddServlet"
        parameters:
        - name: "productDAO"
          value:
            sapientType: "MOCK"
            valueType: "dal.ProductDAO"
            uuid: "productDAO"
      valueType: "controller.AddServlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "VOID"
      uuid: "expectedResult"
- method:
    name: "doPost"
    sourceCodeSignature: "void doPost(HttpServletRequest request, HttpServletResponse\
      \ response)"
    returnType: "void"
    throwsExceptions:
    - "jakarta.servlet.ServletException"
    - "java.io.IOException"
    parameters:
    - name: "request"
      type: "jakarta.servlet.http.HttpServletRequest"
    - name: "response"
      type: "jakarta.servlet.http.HttpServletResponse"
    instructionFingerprint: "3888B1DDDE6CB3C7E7F13022AC403620"
  paths:
  - testPathName: "doPostTest"
    constructorSignature: "<init>(dal.ProductDAO) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "INPUT"
      name: "request"
      valueUuid: "request"
    - type: "INPUT"
      name: "response"
      valueUuid: "response"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "setCharacterEncoding(uniqueUuid3):void"
        throwsExceptions:
        - "java.io.UnsupportedEncodingException"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "getParameter(uniqueUuid4):string"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "getParameter(uniqueUuid5):string2"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "getParameter(uniqueUuid6):string3"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "getParameter(uniqueUuid7):string4"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "getParameter(uniqueUuid8):string5"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "getParameter(uniqueUuid9):string6"
    - type: "LOCAL_VARIABLE"
      name: "request"
      valueUuid: "request"
      methodExercised:
        expression: "getParameter(uniqueUuid10):string7"
    - type: "FIELD"
      name: "productDAO"
      valueUuid: "productDAO"
      methodExercised:
        expression: "addProduct(string,string2,string3,string4,string5,string6,string7):void2"
    - type: "LOCAL_VARIABLE"
      name: "response"
      valueUuid: "response"
      methodExercised:
        expression: "sendRedirect(uniqueUuid11):void3"
        throwsExceptions:
        - "java.io.IOException"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "controller.AddServlet"
        parameters:
        - name: "productDAO"
          value:
            sapientType: "MOCK"
            valueType: "dal.ProductDAO"
            uuid: "productDAO"
      valueType: "controller.AddServlet"
      uuid: "target"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void"
    - sapientType: "BASIC"
      content: !<regular>
        value: "UTF-8"
      valueType: "java.lang.String"
      uuid: "uniqueUuid3"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "name"
      valueType: "java.lang.String"
      uuid: "uniqueUuid4"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "price"
      valueType: "java.lang.String"
      uuid: "uniqueUuid5"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "quantity"
      valueType: "java.lang.String"
      uuid: "uniqueUuid6"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "description"
      valueType: "java.lang.String"
      uuid: "uniqueUuid7"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "image"
      valueType: "java.lang.String"
      uuid: "uniqueUuid8"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "category"
      valueType: "java.lang.String"
      uuid: "uniqueUuid9"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletRequest"
      uuid: "request"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "BASIC"
      content: !<regular>
        value: "country"
      valueType: "java.lang.String"
      uuid: "uniqueUuid10"
    - sapientType: "MOCK"
      valueType: "dal.ProductDAO"
      uuid: "productDAO"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string2"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string4"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string5"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string6"
    - sapientType: "BASIC"
      content: !<regular>
        value: "return_of_getParameter1"
      valueType: "java.lang.String"
      uuid: "string7"
    - sapientType: "MOCK"
      valueType: "jakarta.servlet.http.HttpServletResponse"
      uuid: "response"
    - sapientType: "VOID"
      valueType: "void"
      uuid: "void3"
    - sapientType: "BASIC"
      content: !<regular>
        value: "manage"
      valueType: "java.lang.String"
      uuid: "uniqueUuid11"
    - sapientType: "VOID"
      uuid: "expectedResult"
- method:
    name: "getServletInfo"
    sourceCodeSignature: "String getServletInfo()"
    returnType: "java.lang.String"
    instructionFingerprint: "9728D9D55B74B5244AE46247C02836A8"
  paths:
  - testPathName: "getServletInfoTest"
    constructorSignature: "<init>(dal.ProductDAO) : void"
    problemWasSolvedByProver: true
    inputParameters:
    - type: "CONSTRUCTOR"
      name: "constructor"
      valueUuid: "target"
    - type: "RESULT"
      name: "result"
      valueUuid: "expectedResult"
    disabled: false
    allValues:
    - sapientType: "OBJECT"
      content: !<new>
        target: "controller.AddServlet"
        parameters:
        - name: "productDAO"
          value:
            sapientType: "MOCK"
            valueType: "dal.ProductDAO"
            uuid: "productDAO"
      valueType: "controller.AddServlet"
      uuid: "target"
    - sapientType: "BASIC"
      content: !<regular>
        value: "Short description"
      valueType: "java.lang.String"
      uuid: "expectedResult"
